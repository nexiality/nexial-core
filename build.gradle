/*
 * Copyright 2012-2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

buildscript {
	ext.kotlin_version = '1.7.0'
	ext.springBootVersion = '2.7.1'
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
	}
}

plugins {
	id 'org.springframework.boot' version "$springBootVersion"
	id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
	id 'org.jetbrains.kotlin.plugin.spring' version "$kotlin_version"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'distribution'

// spring 5
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'io.spring.dependency-management'

group = componentGroup

// BUILD_NUMBER
// org.gradle.project.BUILD_NUMBER=systemPropertyValue
ext.env = System.getenv()
ext.buildNumber = (env.RELEASE_VERSION ?: componentVersion) + "_" +
                  ((env.BUILD_NUMBER ?: "0").toInteger() + "").padLeft(4, '0')
version = ext.buildNumber

targetCompatibility = componentJavaVersion
sourceCompatibility = componentJavaVersion
archivesBaseName = componentName

repositories {
	mavenLocal()
	mavenCentral()
	//	maven { url "http://www.dcm4che.org/maven2" }
	//	maven { url 'https://jitpack.io' }
	// maven { url 'http://maven.top-q.co.il/content/repositories/public/' }
}

// spring 5
springBoot { mainClass = componentMainClass }
bootRun { sourceResources sourceSets.main }

configurations {
	provided
	providedCompile
}

sourceSets.main.compileClasspath += configurations.provided

dependencies {
	implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
	implementation("org.apache.logging.log4j:log4j-to-slf4j:${log4jVersion}")

	implementation("org.apache.httpcomponents:httpcore:${httpcoreVersion}")
	implementation("org.apache.httpcomponents:httpclient:${httpclientVersion}")
	implementation("org.apache.httpcomponents:fluent-hc:${httpclientFluent}")
	implementation("org.apache.httpcomponents:httpmime:${httpclientVersion}")
	implementation("org.apache.httpcomponents:httpasyncclient:${httpAsyncClientVersion}")

	// support: apache commons
	implementation("org.apache.commons:commons-lang3:${commonsLang3Version}")
	implementation("org.apache.commons:commons-collections4:${commonsCollection4Version}")
	implementation("commons-beanutils:commons-beanutils:${beanutilsVersion}")
	implementation("commons-cli:commons-cli:${commonsCliVersion}")
	implementation("commons-fileupload:commons-fileupload:${fileuploadVersion}")
	implementation("commons-io:commons-io:${commonsIoVersion}")
	implementation("org.apache.commons:commons-dbcp2:${commonsDbcp2Version}")
	// implementation("org.apache.commons:commons-email:+")
	implementation("org.apache.commons:commons-text:${commonsTextVersion}")
	implementation("org.apache.commons:commons-compress:${commonsCompressVersion}")
	implementation("commons-validator:commons-validator:${commonsValidatorVersion}") {
		exclude module: "commons-collections"
	}

	// csv
	implementation("com.univocity:univocity-parsers:2.9.1")

	// spring (forces version unification)
	implementation("org.springframework.boot:spring-boot-starter-logging") {
		exclude module: "log4j-to-slf4j"
	}
	implementation("org.springframework.boot:spring-boot-starter") {
		exclude module: "log4j-to-slf4j"
	}
	implementation("org.springframework.boot:spring-boot-configuration-processor")
	implementation("org.springframework.boot:spring-boot-starter-jdbc")
	implementation("org.springframework.boot:spring-boot-starter-mail")
	// note: can't get rid of jackson completely because it's references in tika and aws-* libs. boo!
	implementation("org.springframework.boot:spring-boot-starter-web") {
		exclude module: "jackson-databind"
		exclude module: "jackson-annotations"
		exclude module: "jackson-core"
		exclude module: "jackson-module-parameter-names"
		exclude module: "jackson-datatype-jdk8"
		exclude module: "jackson-datatype-jsr310"
		exclude module: "spring-boot-starter-json"
	}
	implementation("org.springframework:spring-tx")
	implementation("org.springframework.boot:spring-boot-starter-websocket")
	implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.13.+")

	implementation("javax.validation:validation-api:${validationApiVersion}")
	implementation("org.yaml:snakeyaml:${snakeYamlVersion}")

	// unit testing
	implementation("junit:junit:${junitVersion}")

	// selenium
	// for IE webdriver: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/
	implementation("org.seleniumhq.selenium:selenium-java:${seleniumVersion}")
	implementation("org.seleniumhq.selenium:selenium-api:${seleniumVersion}")
	// implementation("org.seleniumhq.selenium:selenium-server:${seleniumVersion}")
	implementation("org.seleniumhq.selenium:selenium-remote-driver:${seleniumVersion}")
	implementation("org.seleniumhq.selenium:selenium-support:${seleniumVersion}")
	implementation("org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}")
	implementation("org.seleniumhq.selenium:selenium-ie-driver:${seleniumVersion}")
	implementation("org.seleniumhq.selenium:selenium-safari-driver:${seleniumVersion}")
	implementation("org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}")
	implementation("org.seleniumhq.selenium:selenium-edge-driver:${seleniumVersion}")

	implementation("io.appium:java-client:${appiumVersion}")

	// winium
	// for Winium.Desktop.Driver.exe download: https://github.com/2gis/Winium.Desktop/releases/latest
	implementation("com.github.2gis.winium:winium-webdriver:+")
	implementation("com.github.2gis.winium:winium-elements-desktop:+")

	implementation("org.slf4j:jul-to-slf4j:${jul2Slf4jVersion}")
	// logback lib already references in spring boot logging starter
	implementation("ch.qos.logback:logback-access:+")
	implementation("ch.qos.logback.contrib:logback-json-core:+")
	//	implementation("org.logback-extensions:logback-ext-spring:+")
	implementation("org.fusesource.jansi:jansi:${jansiVersion}")

	//	implementation("ch.qos.logback.contrib:logback-mongodb-core:+")

	// support: aws
	implementation("com.amazonaws:aws-java-sdk-core:+")
	implementation("com.amazonaws:aws-java-sdk-s3:+")
	implementation("com.amazonaws:aws-java-sdk-polly:+")
	implementation("com.amazonaws:aws-java-sdk-sns:+")
	implementation("com.amazonaws:aws-java-sdk-ses:+")
	implementation('com.amazonaws:aws-java-sdk-sqs:+')
	implementation("com.amazonaws:aws-java-sdk-sts:+")
	// implementation("com.amazonaws:aws-java-sdk-textract:+")
	implementation("com.amazonaws:aws-java-sdk-rekognition:+")

	// support: browsermob
	// implementation("net.lightbody.bmp:browsermob-proxy:+")
	// implementation("net.lightbody.bmp:browsermob-core:+")
	// implementation("net.lightbody.bmp:browsermob-rest:+") {
	// 	exclude module: "servlet-api"
	// }

	// support: pdf
	// https://mvnrepository.com/artifact/com.itextpdf/itext7-core
	// implementation("com.itextpdf:itext7-core:+")
	implementation("com.itextpdf:itextpdf:${itextVersion}")
	implementation("com.itextpdf.tool:xmlworker:${itextVersion}")

	implementation("org.apache.pdfbox:pdfbox:${pdfboxVersion}")
	implementation("org.apache.pdfbox:pdfbox-tools:${pdfboxVersion}")
	implementation("org.apache.pdfbox:fontbox:${pdfboxVersion}")
	implementation("org.apache.pdfbox:xmpbox:${pdfboxVersion}")

	// support: poi/msoffice
	implementation("org.apache.poi:poi:${poiVersion}") {
		exclude group: 'org.apache.poi', module: 'poi-ooxml-schemas'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
	}
	implementation("org.apache.poi:poi-ooxml:${poiVersion}") {
		exclude group: 'org.apache.poi', module: 'poi-ooxml-schemas'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
	}
	implementation("org.apache.xmlbeans:xmlbeans:3.0.+")


	// support: json
	implementation("org.json:json:${jsonVersion}")
	//	implementation("com.cedarsoftware:java-util:+")
	implementation("com.cedarsoftware:json-io:4.13.0")
	// implementation("com.github.fge:json-schema-validator:+") {
	// 	exclude module: "mailapi"
	// }
	implementation("com.networknt:json-schema-validator:1.0.70")
	implementation("com.google.code.gson:gson:${gsonVersion}")
	implementation("org.danilopianini:gson-extras:+")
	implementation("com.jayway.jsonpath:json-path:${jsonpathVersion}")
	implementation("org.jdom:jdom2:+")
	implementation("org.jsoup:jsoup:+")
	// v23r* is not compatible with selenium 3.4.0
	implementation("com.google.guava:guava:${guavaVersion}")

	// support: ini
	implementation("org.ini4j:ini4j:0.5.4")

	// support: data sources
	// support Azure database connectivity
	implementation("com.microsoft.azure:msal4j:${msal4jVersion}")

	// support: redis
	implementation("redis.clients:jedis:${jedisVersion}")

	// support: joda-time
	implementation("joda-time:joda-time:+")

	// support: others
	implementation("net.sourceforge.jregex:jregex:+")
	implementation("org.aspectj:aspectjweaver:+")
	implementation("jaxen:jaxen:+")
	implementation("xalan:xalan:+")
	implementation("io.jsonwebtoken:jjwt:+")
	implementation("org.thymeleaf:thymeleaf:${thymeleafVersion}")
	implementation("javax.media:jmf:+")
	implementation("com.github.stephenc.monte:monte-screen-recorder:+")
	// invalid SSL for dcm4che.org, hence disabling this one for now
	//	implementation("xuggle:xuggle-xuggler:5.4")

	// support: jms
	implementation("org.apache.geronimo.specs:geronimo-jms_1.1_spec:1.1.1")
	implementation("javax.transaction:jta:1.1")
	implementation("org.apache.activemq:activemq-client:${activemqVersion}")
	implementation("com.rabbitmq.jms:rabbitmq-jms:1.+")

	implementation("javax.mail:javax.mail-api:${javaxMailVersion}")
	implementation("com.sun.mail:smtp:${sunMailVersion}")

	// https://mvnrepository.com/artifact/pl.touk/throwing-function
	implementation("pl.touk:throwing-function:${throwingFunctionVersion}")

	implementation("org.apache.tika:tika-core:${tikaVersion}") {
		exclude group: 'org.apache.poi', module: 'poi'
		exclude group: 'org.apache.poi', module: 'poi-scratchpad'
		exclude group: 'org.apache.poi', module: 'poi-ooxml'
	}
	implementation("org.apache.tika:tika-parsers:${tikaVersion}") {
		exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
		exclude group: 'edu.ucar', module: 'grib'
		exclude group: 'edu.ucar', module: 'cdm'
		exclude group: 'org.apache.poi', module: 'poi'
		exclude group: 'org.apache.poi', module: 'poi-scratchpad'
		exclude group: 'org.apache.poi', module: 'poi-ooxml'
	}

	// support: ssh, scp, sftp
	implementation("com.jcraft:jsch:${jschVersion}")

	implementation("org.java-websocket:Java-WebSocket:${websocketVersion}")

	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
	implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
	implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")

	implementation("com.googlecode.soundlibs:jlayer:1.0.1.4")

	// console with color
	implementation("com.diogonunes:JCDP:${jcdpVersion}")

	// ashot
	implementation("ru.yandex.qatools.ashot:ashot:${ashotVersion}")

	implementation("com.github.romankh3:image-comparison:${imageComparisonVersion}")

	// fmpeg (NOTE: THIS IS IN CONFLICT AGAINST THE SAME isoparser PULLED IN VIA THE TIKA DEPENDENCIES)
	// https://mvnrepository.com/artifact/org.bytedeco/ffmpeg
	// compile group: 'org.bytedeco', name: 'ffmpeg', version: '4.2.1-1.5.2'
	// implementation("org.mp4parser:isoparser:1.9.+")
	implementation("com.googlecode.mp4parser:isoparser:1.1.22")

	implementation("net.dongliu:apk-parser:2.6.10")

	//	non-distributable libs
	implementation fileTree(dir: 'lib', include: '*.jar')

	implementation("com.mikesamuel:json-sanitizer:${jsonSanitizerVersion}")

	// JT400 for Tn5250/AS400
	implementation("net.sf.jt400:jt400:${jt400Version}")


	//	implementation 'org.owasp:java-file-io:1.0.0'
	//	https://github.com/augustd/owasp-java-fileio/tree/master/src/main/java/org/owasp/fileio

	// provided("javax.servlet:javax.servlet-api:${servletApiVersion}") { force = true }

	// annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	testImplementation("org.springframework.boot:spring-boot-starter-test")
	implementation("org.jetbrains.kotlin:kotlin-test")
}

jar {
	enabled = true
	baseName = archivesBaseName
	manifest {
		attributes "Implementation-Title": archivesBaseName,
		           "Implementation-Version": version,
		           "Main-Class": componentMainClass
	}
}

tasks.withType(Test) {
	mkdir "${System.properties['user.home']}${System.properties['file.separator']}tmp"
	maxParallelForks = 10
	systemProperty 'nexial.home', projectDir
	systemProperty 'user.country', 'US'
	systemProperty 'user.language', 'en'
	systemProperty 'user.timezone', 'PST'
	systemProperty 'java.io.tmpdir', "${System.properties['user.home']}${System.properties['file.separator']}tmp"
}

test {
	maxHeapSize = "256m"
	jvmArgs '-Xss24m',
	        '-Dfile.encoding=UTF-8',
	        '--add-exports', 'java.base/sun.nio.ch=ALL-UNNAMED',
	        '--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED',
	        '--add-opens', 'java.base/java.io=ALL-UNNAMED',
	        '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
	        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
	        '--add-opens', 'java.base/java.text=ALL-UNNAMED',
	        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
	        '--add-opens', 'java.desktop/java.awt.font=ALL-UNNAMED'
	reports.html.enabled = true
	reports.junitXml.enabled = true
	exclude '**/*Manual*'
	testLogging {
		events "PASSED", "STARTED", "FAILED", "SKIPPED"
	}
}

compileJava.dependsOn(processResources)

tasks.withType(JavaCompile) {
	options.fork = true
	options.incremental = true
	options.compilerArgs += ["-parameters"]
}

task singleDependentJar(type: Jar) {
	manifest {
		attributes "Implementation-Title": archivesBaseName,
		           "Implementation-Version": version,
		           "Main-Class": componentMainClass
	}
	baseName = archivesBaseName
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
	zip64 = true
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task testJar(type: Jar) {
	classifier = 'tests'
	from sourceSets.test.output
	include('**/*.class')
}

artifacts {
	archives jar
	archives sourcesJar
	//	    archives singleDependentJar
}

task distro {
	group "Build"
	description "build project clean room and update lib/ directory"
	mustRunAfter clean
	dependsOn build
}

task generateNexialLib(type: Zip) {
	group "generate-nexial-lib"
	description "create nexial-lib-x.x.zip"
	baseName = 'nexial-lib'
	version = new File('./lib/nexial-lib-version.txt').readLines().get(0)
	from 'lib'
}

task copyLibToUserHomeNexial {
	group "Build"
	dependsOn build
	def userhome = env.HOME ? env.HOME : env.USERPROFILE
	copy {
		from 'lib'
		into "${userhome}/.nexial/lib"
	}
}

distributions {
	main {
		contents {
			into('lib') {
				from jar
				from(project.configurations.runtimeClasspath) {
					ConfigurableFileTree tree = fileTree(dir: 'lib', include: '*.jar')
					tree.each { File file -> exclude file.name }
				}
				from('lib') {
					include "nexial-lib-version.txt"
				}
			}
			into('template') {
				from 'template'
			}
			into('bin') {
				from 'bin'
			}
		}
	}
}

compileKotlin {
	kotlinOptions {
		jvmTarget = componentJavaVersion
		javaParameters = true
	}
}

compileTestKotlin {
	kotlinOptions {
		jvmTarget = componentJavaVersion
		javaParameters = true
	}
}
