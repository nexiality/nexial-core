/* * Copyright 2012-2018 the original author or authors. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *       http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.nexial.core.plugins.imageimport org.apache.commons.io.FileUtilsimport org.apache.commons.lang3.StringUtilsimport org.apache.commons.lang3.SystemUtilsimport org.nexial.commons.utils.FileUtilimport org.nexial.core.plugins.image.ImageMagickDownloadHelper.OSType.*import org.nexial.core.plugins.ws.WebServiceClientimport org.nexial.core.utils.ConsoleUtilsimport java.io.Fileimport java.io.IOExceptionimport java.nio.file.Filesimport java.nio.file.Pathimport java.nio.file.Pathsclass ImageMagickDownloadHelper {    enum class OSType { WINDOWS, LINUX, MAC }    companion object {        /** Method will return os name which can be used to retrieve url */        fun getDownloadConfigKey(): String = if (SystemUtils.IS_OS_WINDOWS) WINDOWS.name.lowercase()        else if (SystemUtils.IS_OS_LINUX) LINUX.name.lowercase()        else if (SystemUtils.IS_OS_MAC) MAC.name.lowercase() else ""    }    /** Method will help to download imagemagick tool based on nexial.xml url configuration. */    @Throws(IOException::class)    fun downloadAndExtract(config: Map<String, String>) {        val osType = getDownloadConfigKey()        if (StringUtils.isBlank(osType)) {            ConsoleUtils.error("Error while downloading imagemagick for this OS")            return        }        val downloadUrl: String? = config["${osType}-url"]        val imPath = config["location"].toString()        val imDir = File(imPath)        if (imDir.exists()) FileUtils.deleteQuietly(imDir)        val downloadToFileName = "$imPath.tmp"        ConsoleUtils.log("Downloading latest ImageMagick, it may take few minutes to complete.")        downloadFile(downloadUrl!!, downloadToFileName)        when (osType) {            WINDOWS.name.lowercase() -> FileUtil.unzip(File(downloadToFileName), imDir, false)            LINUX.name.lowercase()   -> extractAppImage(downloadToFileName, imDir)            MAC.name.lowercase()     -> extractTarGZ(downloadToFileName, imDir)        }        FileUtils.deleteQuietly(File(downloadToFileName))    }    /** Method will download any file based on provided url */    @Throws(IOException::class)    private fun downloadFile(url: String, downloadTo: String) {        val downloadToFile = File(downloadTo)        if (downloadToFile.exists()) FileUtils.deleteQuietly(downloadToFile)        if (StringUtils.isNotBlank(url)) {            val wsClient = WebServiceClient(null).configureAsQuiet().disableContextConfiguration()            val response = wsClient.download(url, null, downloadTo)            if (response.returnCode >= 400) {                throw IOException("Unable to download file from url: $url")            }        }    }    /** Method used to extract ImageMagick downloaded file for mac os. */    @Throws(IOException::class)    private fun extractTarGZ(filePath: String, imDir: File) {        val imageMagickTmpDir: Path = Paths.get(imDir.parent, "imagemagickTemp")        Files.createDirectory(imageMagickTmpDir)        Files.createDirectory(imDir.toPath())        val cmd = arrayOf("sh", "-c", "tar -xf $filePath --directory ${imageMagickTmpDir.toAbsolutePath()}")        FileUtil.executeCommand(cmd)        val imageMagickTmpDirFile = imageMagickTmpDir.toFile()        val listOfFile: Array<File> = imageMagickTmpDirFile.listFiles()!!        FileUtils.copyDirectory(listOfFile[0], imDir)        FileUtils.deleteQuietly(imageMagickTmpDirFile)    }    /** Method used to extract ImageMagick downloaded file for linux os. */    private fun extractAppImage(filePath: String, imageMagickDir: File) {        val appImageFile = File(filePath)        val parentFolder = appImageFile.toPath().parent.toFile()        appImageFile.setExecutable(true)        imageMagickDir.mkdir()        val defaultExtractDir = Paths.get(parentFolder.absolutePath, "squashfs-root")        val appImageExtractCommand =            arrayOf("sh", "-c", "cd ${parentFolder.absolutePath}; ./${appImageFile.name} --appimage-extract")        try {            Runtime.getRuntime().exec(appImageExtractCommand).waitFor()            FileUtils.copyDirectory(                Paths.get(defaultExtractDir.toAbsolutePath().toString(), "usr").toFile(),                imageMagickDir                                   )        } catch (e: Exception) {            ConsoleUtils.error("Failed to extract AppImage contents for ImageMagick.")        } finally {            FileUtils.deleteQuietly(defaultExtractDir.toFile())        }    }}