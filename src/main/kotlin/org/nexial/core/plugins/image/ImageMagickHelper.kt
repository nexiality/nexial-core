/* * Copyright 2012-2018 the original author or authors. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *       http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.nexial.core.plugins.imageimport org.apache.commons.lang3.StringUtilsimport org.apache.commons.lang3.SystemUtilsimport org.im4java.core.ConvertCmdimport org.im4java.core.IM4JavaExceptionimport org.im4java.core.IMOperationimport org.nexial.commons.utils.FileUtilimport org.nexial.core.model.ExecutionContextimport org.nexial.core.plugins.image.ImageMagickDownloadHelper.OSType.WINDOWSimport org.nexial.core.utils.ConsoleUtilsimport java.io.Fileimport java.io.File.separatorimport java.io.IOExceptionimport java.nio.file.Paths.getimport kotlin.io.path.absolutePathStringclass ImageMagickHelper {    private val convertCmd = ConvertCmd()    /**     * Method used to convert input image into grayscale image.     * It is using image magick to convert image into grayscale.     */    @Throws(IOException::class, InterruptedException::class, IM4JavaException::class)    fun convertToGrayscale(imageFile: String, context: ExecutionContext): String {        val actualImgFile = File(imageFile)        val outputImageFile = "${actualImgFile.parent}${separator}temp_gray_${actualImgFile.name}"        val operation = IMOperation()        operation.addImage(actualImgFile.absolutePath)        operation.colorspace("Gray")        operation.separate()        operation.average()        operation.addImage(outputImageFile)        //set ImageMagick path into im4java        convertCmd.searchPath = checkAndDownloadIM(context)        convertCmd.run(operation)        return outputImageFile    }    /**     * Method will check ImageMagick version if not found then it will download it.     * if version found then compare it with configured version, if mismath found then download it.     * */    @Throws(IOException::class, InterruptedException::class, IM4JavaException::class)    private fun checkAndDownloadIM(context: ExecutionContext): String {        val downloadHelper = ImageMagickDownloadHelper()        val osType = ImageMagickDownloadHelper.getDownloadConfigKey()        val config: Map<String, String> = context.imageMagicConfig        val requiredVersion = config["${osType}-required-version"]        var imPath = config["location"]        val currentVersion = getVersion(imPath!!)        if (StringUtils.isBlank(currentVersion)) {            ConsoleUtils.log("ImageMagick not found.")            downloadHelper.downloadAndExtract(config)        } else if (!currentVersion.startsWith(requiredVersion!!)) {            ConsoleUtils.log("Current imagemagick version is not matching with required version")            downloadHelper.downloadAndExtract(config)        }        if (osType != WINDOWS.name.lowercase()) {            imPath += "/bin"        }        return imPath    }    /** Method will return ImageMagick version */    @Throws(IOException::class, InterruptedException::class, IM4JavaException::class)    private fun getVersion(imPath: String): String {        val cmd = getImageMagickVerCommand("$imPath${separator}")        val version = FileUtil.executeCommand(cmd)        return if (version!!.contains("="))            StringUtils.substringAfter(version, "=")        else version    }    /** Method will return OS specific command to retrieve ImageMagick version. */    private fun getImageMagickVerCommand(binaryLocation: String): Array<String>? = if (SystemUtils.IS_OS_WINDOWS)        arrayOf(            "cmd.exe",            "/C",            "wmic datafile where name=\"" + binaryLocation.replace("/", "\\")                .replace("\\", "\\\\") + "convert.exe\" get Version /value"               )    else if (SystemUtils.IS_OS_LINUX || SystemUtils.IS_OS_MAC)        arrayOf(            "sh", "-c", get(binaryLocation, "bin", "magick")                .absolutePathString() + " -version | head -1 | cut -d \" \" -f 3"               )    else null}